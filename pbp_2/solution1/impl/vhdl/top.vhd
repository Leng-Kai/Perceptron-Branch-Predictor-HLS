-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top is
generic (
    C_S_AXI_BP0_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_BP0_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s_axi_bp0_AWVALID : IN STD_LOGIC;
    s_axi_bp0_AWREADY : OUT STD_LOGIC;
    s_axi_bp0_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_BP0_ADDR_WIDTH-1 downto 0);
    s_axi_bp0_WVALID : IN STD_LOGIC;
    s_axi_bp0_WREADY : OUT STD_LOGIC;
    s_axi_bp0_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_BP0_DATA_WIDTH-1 downto 0);
    s_axi_bp0_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_BP0_DATA_WIDTH/8-1 downto 0);
    s_axi_bp0_ARVALID : IN STD_LOGIC;
    s_axi_bp0_ARREADY : OUT STD_LOGIC;
    s_axi_bp0_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_BP0_ADDR_WIDTH-1 downto 0);
    s_axi_bp0_RVALID : OUT STD_LOGIC;
    s_axi_bp0_RREADY : IN STD_LOGIC;
    s_axi_bp0_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_BP0_DATA_WIDTH-1 downto 0);
    s_axi_bp0_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_bp0_BVALID : OUT STD_LOGIC;
    s_axi_bp0_BREADY : IN STD_LOGIC;
    s_axi_bp0_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "top,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=8.641000,HLS_SYN_LAT=2,HLS_SYN_TPT=3,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=193,HLS_SYN_LUT=651,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal pc_V : STD_LOGIC_VECTOR (31 downto 0);
    signal isBranch_V : STD_LOGIC_VECTOR (0 downto 0);
    signal isBranch_V_ap_vld : STD_LOGIC;
    signal result_V : STD_LOGIC_VECTOR (0 downto 0);
    signal perceptron_V_4_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal perceptron_V_4_ce0 : STD_LOGIC;
    signal perceptron_V_4_we0 : STD_LOGIC;
    signal perceptron_V_4_d0 : STD_LOGIC_VECTOR (3 downto 0);
    signal perceptron_V_4_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal bht_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal bht_1 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal perceptron_V_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal perceptron_V_0_ce0 : STD_LOGIC;
    signal perceptron_V_0_we0 : STD_LOGIC;
    signal perceptron_V_0_d0 : STD_LOGIC_VECTOR (3 downto 0);
    signal perceptron_V_0_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal perceptron_V_1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal perceptron_V_1_ce0 : STD_LOGIC;
    signal perceptron_V_1_we0 : STD_LOGIC;
    signal perceptron_V_1_d0 : STD_LOGIC_VECTOR (3 downto 0);
    signal perceptron_V_1_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal bht_2 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal bht_3 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal perceptron_V_2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal perceptron_V_2_ce0 : STD_LOGIC;
    signal perceptron_V_2_we0 : STD_LOGIC;
    signal perceptron_V_2_d0 : STD_LOGIC_VECTOR (3 downto 0);
    signal perceptron_V_2_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal perceptron_V_3_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal perceptron_V_3_ce0 : STD_LOGIC;
    signal perceptron_V_3_we0 : STD_LOGIC;
    signal perceptron_V_3_d0 : STD_LOGIC_VECTOR (3 downto 0);
    signal perceptron_V_3_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal perceptron_V_4_addr_reg_458 : STD_LOGIC_VECTOR (5 downto 0);
    signal perceptron_V_0_addr_reg_463 : STD_LOGIC_VECTOR (5 downto 0);
    signal perceptron_V_1_addr_reg_468 : STD_LOGIC_VECTOR (5 downto 0);
    signal perceptron_V_2_addr_reg_473 : STD_LOGIC_VECTOR (5 downto 0);
    signal perceptron_V_3_addr_reg_478 : STD_LOGIC_VECTOR (5 downto 0);
    signal result_V_read_reg_483 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_reg_491 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal bht_0_load_reg_499 : STD_LOGIC_VECTOR (0 downto 0);
    signal bht_1_load_reg_504 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln60_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln60_reg_509 : STD_LOGIC_VECTOR (0 downto 0);
    signal perceptron_V_0_load_reg_513 : STD_LOGIC_VECTOR (3 downto 0);
    signal perceptron_V_1_load_reg_521 : STD_LOGIC_VECTOR (3 downto 0);
    signal bht_2_load_reg_529 : STD_LOGIC_VECTOR (0 downto 0);
    signal bht_3_load_reg_535 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln60_1_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln60_1_reg_540 : STD_LOGIC_VECTOR (0 downto 0);
    signal perceptron_V_2_load_reg_544 : STD_LOGIC_VECTOR (3 downto 0);
    signal perceptron_V_3_load_reg_552 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln70_1_fu_273_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln70_1_reg_560 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_reg_566 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln544_fu_166_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal and_ln15_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln701_fu_325_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln887_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln700_fu_336_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln879_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_1_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln701_1_fu_373_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln887_1_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln700_1_fu_384_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln895_2_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln701_2_fu_351_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln887_2_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln700_2_fu_362_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln879_1_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_3_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln701_3_fu_421_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln887_3_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln700_3_fu_432_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln895_4_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln701_4_fu_399_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln887_4_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln700_4_fu_410_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal index_V_fu_162_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln60_fu_175_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln60_fu_193_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln1352_fu_223_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln1352_fu_227_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln1352_fu_233_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln60_1_fu_215_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln1352_2_fu_245_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln1352_1_fu_249_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln1352_1_fu_255_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln60_fu_175_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln70_fu_263_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln70_fu_269_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln1352_1_fu_241_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln74_fu_293_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln74_fu_298_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln15_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln15_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_condition_444 : BOOLEAN;
    signal ap_condition_450 : BOOLEAN;
    signal ap_condition_455 : BOOLEAN;
    signal ap_condition_460 : BOOLEAN;

    component top_perceptron_V_4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (3 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component top_bp0_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        pc_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        isBranch_V : IN STD_LOGIC_VECTOR (0 downto 0);
        isBranch_V_ap_vld : IN STD_LOGIC;
        result_V : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    perceptron_V_4_U : component top_perceptron_V_4
    generic map (
        DataWidth => 4,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => perceptron_V_4_address0,
        ce0 => perceptron_V_4_ce0,
        we0 => perceptron_V_4_we0,
        d0 => perceptron_V_4_d0,
        q0 => perceptron_V_4_q0);

    perceptron_V_0_U : component top_perceptron_V_4
    generic map (
        DataWidth => 4,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => perceptron_V_0_address0,
        ce0 => perceptron_V_0_ce0,
        we0 => perceptron_V_0_we0,
        d0 => perceptron_V_0_d0,
        q0 => perceptron_V_0_q0);

    perceptron_V_1_U : component top_perceptron_V_4
    generic map (
        DataWidth => 4,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => perceptron_V_1_address0,
        ce0 => perceptron_V_1_ce0,
        we0 => perceptron_V_1_we0,
        d0 => perceptron_V_1_d0,
        q0 => perceptron_V_1_q0);

    perceptron_V_2_U : component top_perceptron_V_4
    generic map (
        DataWidth => 4,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => perceptron_V_2_address0,
        ce0 => perceptron_V_2_ce0,
        we0 => perceptron_V_2_we0,
        d0 => perceptron_V_2_d0,
        q0 => perceptron_V_2_q0);

    perceptron_V_3_U : component top_perceptron_V_4
    generic map (
        DataWidth => 4,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => perceptron_V_3_address0,
        ce0 => perceptron_V_3_ce0,
        we0 => perceptron_V_3_we0,
        d0 => perceptron_V_3_d0,
        q0 => perceptron_V_3_q0);

    top_bp0_s_axi_U : component top_bp0_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_BP0_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_BP0_DATA_WIDTH)
    port map (
        AWVALID => s_axi_bp0_AWVALID,
        AWREADY => s_axi_bp0_AWREADY,
        AWADDR => s_axi_bp0_AWADDR,
        WVALID => s_axi_bp0_WVALID,
        WREADY => s_axi_bp0_WREADY,
        WDATA => s_axi_bp0_WDATA,
        WSTRB => s_axi_bp0_WSTRB,
        ARVALID => s_axi_bp0_ARVALID,
        ARREADY => s_axi_bp0_ARREADY,
        ARADDR => s_axi_bp0_ARADDR,
        RVALID => s_axi_bp0_RVALID,
        RREADY => s_axi_bp0_RREADY,
        RDATA => s_axi_bp0_RDATA,
        RRESP => s_axi_bp0_RRESP,
        BVALID => s_axi_bp0_BVALID,
        BREADY => s_axi_bp0_BREADY,
        BRESP => s_axi_bp0_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        pc_V => pc_V,
        isBranch_V => isBranch_V,
        isBranch_V_ap_vld => isBranch_V_ap_vld,
        result_V => result_V);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln70_1_reg_560 <= add_ln70_1_fu_273_p2;
                bht_0_load_reg_499 <= bht_0;
                bht_1_load_reg_504 <= bht_1;
                bht_2_load_reg_529 <= bht_2;
                bht_3_load_reg_535 <= bht_3;
                perceptron_V_0_load_reg_513 <= perceptron_V_0_q0;
                perceptron_V_1_load_reg_521 <= perceptron_V_1_q0;
                perceptron_V_2_load_reg_544 <= perceptron_V_2_q0;
                perceptron_V_3_load_reg_552 <= perceptron_V_3_q0;
                t_V_reg_491 <= perceptron_V_4_q0;
                tmp_reg_566 <= add_ln70_1_fu_273_p2(5 downto 5);
                xor_ln60_1_reg_540 <= xor_ln60_1_fu_209_p2;
                xor_ln60_reg_509 <= xor_ln60_fu_187_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln15_fu_314_p2) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                bht_0 <= bht_1_load_reg_504;
                bht_1 <= bht_2_load_reg_529;
                bht_2 <= bht_3_load_reg_535;
                bht_3 <= result_V_read_reg_483;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                perceptron_V_0_addr_reg_463 <= zext_ln544_fu_166_p1(6 - 1 downto 0);
                perceptron_V_1_addr_reg_468 <= zext_ln544_fu_166_p1(6 - 1 downto 0);
                perceptron_V_2_addr_reg_473 <= zext_ln544_fu_166_p1(6 - 1 downto 0);
                perceptron_V_3_addr_reg_478 <= zext_ln544_fu_166_p1(6 - 1 downto 0);
                perceptron_V_4_addr_reg_458 <= zext_ln544_fu_166_p1(6 - 1 downto 0);
                result_V_read_reg_483 <= result_V;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln700_1_fu_384_p2 <= std_logic_vector(unsigned(perceptron_V_0_load_reg_513) + unsigned(ap_const_lv4_2));
    add_ln700_2_fu_362_p2 <= std_logic_vector(unsigned(perceptron_V_1_load_reg_521) + unsigned(ap_const_lv4_2));
    add_ln700_3_fu_432_p2 <= std_logic_vector(unsigned(perceptron_V_2_load_reg_544) + unsigned(ap_const_lv4_2));
    add_ln700_4_fu_410_p2 <= std_logic_vector(unsigned(perceptron_V_3_load_reg_552) + unsigned(ap_const_lv4_2));
    add_ln700_fu_336_p2 <= std_logic_vector(signed(t_V_reg_491) + signed(ap_const_lv4_1));
    add_ln701_1_fu_373_p2 <= std_logic_vector(unsigned(perceptron_V_0_load_reg_513) + unsigned(ap_const_lv4_E));
    add_ln701_2_fu_351_p2 <= std_logic_vector(unsigned(perceptron_V_1_load_reg_521) + unsigned(ap_const_lv4_E));
    add_ln701_3_fu_421_p2 <= std_logic_vector(unsigned(perceptron_V_2_load_reg_544) + unsigned(ap_const_lv4_E));
    add_ln701_4_fu_399_p2 <= std_logic_vector(unsigned(perceptron_V_3_load_reg_552) + unsigned(ap_const_lv4_E));
    add_ln701_fu_325_p2 <= std_logic_vector(signed(t_V_reg_491) + signed(ap_const_lv4_F));
    add_ln70_1_fu_273_p2 <= std_logic_vector(signed(sext_ln70_fu_269_p1) + signed(sext_ln1352_1_fu_241_p1));
    add_ln70_fu_263_p2 <= std_logic_vector(unsigned(select_ln1352_1_fu_255_p3) + unsigned(sext_ln60_fu_175_p1));
    and_ln15_fu_314_p2 <= (xor_ln15_fu_304_p2 and icmp_ln15_fu_308_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_condition_444_assign_proc : process(xor_ln60_reg_509, ap_CS_fsm_state3, and_ln15_fu_314_p2)
    begin
                ap_condition_444 <= ((ap_const_lv1_0 = and_ln15_fu_314_p2) and (ap_const_logic_1 = ap_CS_fsm_state3) and (xor_ln60_reg_509 = ap_const_lv1_1));
    end process;


    ap_condition_450_assign_proc : process(xor_ln60_reg_509, ap_CS_fsm_state3, and_ln15_fu_314_p2)
    begin
                ap_condition_450 <= ((ap_const_lv1_0 = and_ln15_fu_314_p2) and (xor_ln60_reg_509 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3));
    end process;


    ap_condition_455_assign_proc : process(xor_ln60_1_reg_540, ap_CS_fsm_state3, and_ln15_fu_314_p2)
    begin
                ap_condition_455 <= ((ap_const_lv1_0 = and_ln15_fu_314_p2) and (ap_const_logic_1 = ap_CS_fsm_state3) and (xor_ln60_1_reg_540 = ap_const_lv1_1));
    end process;


    ap_condition_460_assign_proc : process(xor_ln60_1_reg_540, ap_CS_fsm_state3, and_ln15_fu_314_p2)
    begin
                ap_condition_460 <= ((ap_const_lv1_0 = and_ln15_fu_314_p2) and (xor_ln60_1_reg_540 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    icmp_ln15_fu_308_p2 <= "1" when (signed(select_ln74_fu_298_p3) > signed(ap_const_lv6_8)) else "0";
    icmp_ln887_1_fu_379_p2 <= "1" when (signed(perceptron_V_0_load_reg_513) < signed(ap_const_lv4_6)) else "0";
    icmp_ln887_2_fu_357_p2 <= "1" when (signed(perceptron_V_1_load_reg_521) < signed(ap_const_lv4_6)) else "0";
    icmp_ln887_3_fu_427_p2 <= "1" when (signed(perceptron_V_2_load_reg_544) < signed(ap_const_lv4_6)) else "0";
    icmp_ln887_4_fu_405_p2 <= "1" when (signed(perceptron_V_3_load_reg_552) < signed(ap_const_lv4_6)) else "0";
    icmp_ln887_fu_331_p2 <= "1" when (signed(t_V_reg_491) < signed(ap_const_lv4_6)) else "0";
    icmp_ln895_1_fu_368_p2 <= "1" when (signed(perceptron_V_0_load_reg_513) > signed(ap_const_lv4_9)) else "0";
    icmp_ln895_2_fu_346_p2 <= "1" when (signed(perceptron_V_1_load_reg_521) > signed(ap_const_lv4_9)) else "0";
    icmp_ln895_3_fu_416_p2 <= "1" when (signed(perceptron_V_2_load_reg_544) > signed(ap_const_lv4_9)) else "0";
    icmp_ln895_4_fu_394_p2 <= "1" when (signed(perceptron_V_3_load_reg_552) > signed(ap_const_lv4_9)) else "0";
    icmp_ln895_fu_320_p2 <= "1" when (signed(t_V_reg_491) > signed(ap_const_lv4_9)) else "0";
    index_V_fu_162_p1 <= pc_V(6 - 1 downto 0);
    isBranch_V <= (tmp_reg_566 xor ap_const_lv1_1);

    isBranch_V_ap_vld_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            isBranch_V_ap_vld <= ap_const_logic_1;
        else 
            isBranch_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    perceptron_V_0_address0_assign_proc : process(ap_CS_fsm_state1, perceptron_V_0_addr_reg_463, xor_ln60_reg_509, zext_ln544_fu_166_p1, ap_CS_fsm_state3, and_ln15_fu_314_p2, xor_ln879_fu_342_p2, icmp_ln895_1_fu_368_p2, icmp_ln887_1_fu_379_p2)
    begin
        if ((((ap_const_lv1_0 = and_ln15_fu_314_p2) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln887_1_fu_379_p2 = ap_const_lv1_1) and (xor_ln879_fu_342_p2 = ap_const_lv1_1) and (xor_ln60_reg_509 = ap_const_lv1_1)) or ((xor_ln879_fu_342_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln15_fu_314_p2) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln895_1_fu_368_p2 = ap_const_lv1_1) and (xor_ln60_reg_509 = ap_const_lv1_1)))) then 
            perceptron_V_0_address0 <= perceptron_V_0_addr_reg_463;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            perceptron_V_0_address0 <= zext_ln544_fu_166_p1(6 - 1 downto 0);
        else 
            perceptron_V_0_address0 <= "XXXXXX";
        end if; 
    end process;


    perceptron_V_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, xor_ln60_reg_509, ap_CS_fsm_state3, and_ln15_fu_314_p2, xor_ln879_fu_342_p2, icmp_ln895_1_fu_368_p2, icmp_ln887_1_fu_379_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_const_lv1_0 = and_ln15_fu_314_p2) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln887_1_fu_379_p2 = ap_const_lv1_1) and (xor_ln879_fu_342_p2 = ap_const_lv1_1) and (xor_ln60_reg_509 = ap_const_lv1_1)) or ((xor_ln879_fu_342_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln15_fu_314_p2) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln895_1_fu_368_p2 = ap_const_lv1_1) and (xor_ln60_reg_509 = ap_const_lv1_1)))) then 
            perceptron_V_0_ce0 <= ap_const_logic_1;
        else 
            perceptron_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    perceptron_V_0_d0_assign_proc : process(xor_ln879_fu_342_p2, icmp_ln895_1_fu_368_p2, add_ln701_1_fu_373_p2, icmp_ln887_1_fu_379_p2, add_ln700_1_fu_384_p2, ap_condition_444)
    begin
        if ((ap_const_boolean_1 = ap_condition_444)) then
            if (((icmp_ln887_1_fu_379_p2 = ap_const_lv1_1) and (xor_ln879_fu_342_p2 = ap_const_lv1_1))) then 
                perceptron_V_0_d0 <= add_ln700_1_fu_384_p2;
            elsif (((xor_ln879_fu_342_p2 = ap_const_lv1_0) and (icmp_ln895_1_fu_368_p2 = ap_const_lv1_1))) then 
                perceptron_V_0_d0 <= add_ln701_1_fu_373_p2;
            else 
                perceptron_V_0_d0 <= "XXXX";
            end if;
        else 
            perceptron_V_0_d0 <= "XXXX";
        end if; 
    end process;


    perceptron_V_0_we0_assign_proc : process(xor_ln60_reg_509, ap_CS_fsm_state3, and_ln15_fu_314_p2, xor_ln879_fu_342_p2, icmp_ln895_1_fu_368_p2, icmp_ln887_1_fu_379_p2)
    begin
        if ((((ap_const_lv1_0 = and_ln15_fu_314_p2) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln887_1_fu_379_p2 = ap_const_lv1_1) and (xor_ln879_fu_342_p2 = ap_const_lv1_1) and (xor_ln60_reg_509 = ap_const_lv1_1)) or ((xor_ln879_fu_342_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln15_fu_314_p2) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln895_1_fu_368_p2 = ap_const_lv1_1) and (xor_ln60_reg_509 = ap_const_lv1_1)))) then 
            perceptron_V_0_we0 <= ap_const_logic_1;
        else 
            perceptron_V_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    perceptron_V_1_address0_assign_proc : process(ap_CS_fsm_state1, perceptron_V_1_addr_reg_468, xor_ln60_reg_509, zext_ln544_fu_166_p1, ap_CS_fsm_state3, and_ln15_fu_314_p2, xor_ln879_fu_342_p2, icmp_ln895_2_fu_346_p2, icmp_ln887_2_fu_357_p2)
    begin
        if ((((ap_const_lv1_0 = and_ln15_fu_314_p2) and (xor_ln60_reg_509 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln887_2_fu_357_p2 = ap_const_lv1_1) and (xor_ln879_fu_342_p2 = ap_const_lv1_1)) or ((xor_ln879_fu_342_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln15_fu_314_p2) and (xor_ln60_reg_509 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln895_2_fu_346_p2 = ap_const_lv1_1)))) then 
            perceptron_V_1_address0 <= perceptron_V_1_addr_reg_468;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            perceptron_V_1_address0 <= zext_ln544_fu_166_p1(6 - 1 downto 0);
        else 
            perceptron_V_1_address0 <= "XXXXXX";
        end if; 
    end process;


    perceptron_V_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, xor_ln60_reg_509, ap_CS_fsm_state3, and_ln15_fu_314_p2, xor_ln879_fu_342_p2, icmp_ln895_2_fu_346_p2, icmp_ln887_2_fu_357_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_const_lv1_0 = and_ln15_fu_314_p2) and (xor_ln60_reg_509 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln887_2_fu_357_p2 = ap_const_lv1_1) and (xor_ln879_fu_342_p2 = ap_const_lv1_1)) or ((xor_ln879_fu_342_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln15_fu_314_p2) and (xor_ln60_reg_509 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln895_2_fu_346_p2 = ap_const_lv1_1)))) then 
            perceptron_V_1_ce0 <= ap_const_logic_1;
        else 
            perceptron_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    perceptron_V_1_d0_assign_proc : process(xor_ln879_fu_342_p2, icmp_ln895_2_fu_346_p2, add_ln701_2_fu_351_p2, icmp_ln887_2_fu_357_p2, add_ln700_2_fu_362_p2, ap_condition_450)
    begin
        if ((ap_const_boolean_1 = ap_condition_450)) then
            if (((icmp_ln887_2_fu_357_p2 = ap_const_lv1_1) and (xor_ln879_fu_342_p2 = ap_const_lv1_1))) then 
                perceptron_V_1_d0 <= add_ln700_2_fu_362_p2;
            elsif (((xor_ln879_fu_342_p2 = ap_const_lv1_0) and (icmp_ln895_2_fu_346_p2 = ap_const_lv1_1))) then 
                perceptron_V_1_d0 <= add_ln701_2_fu_351_p2;
            else 
                perceptron_V_1_d0 <= "XXXX";
            end if;
        else 
            perceptron_V_1_d0 <= "XXXX";
        end if; 
    end process;


    perceptron_V_1_we0_assign_proc : process(xor_ln60_reg_509, ap_CS_fsm_state3, and_ln15_fu_314_p2, xor_ln879_fu_342_p2, icmp_ln895_2_fu_346_p2, icmp_ln887_2_fu_357_p2)
    begin
        if ((((ap_const_lv1_0 = and_ln15_fu_314_p2) and (xor_ln60_reg_509 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln887_2_fu_357_p2 = ap_const_lv1_1) and (xor_ln879_fu_342_p2 = ap_const_lv1_1)) or ((xor_ln879_fu_342_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln15_fu_314_p2) and (xor_ln60_reg_509 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln895_2_fu_346_p2 = ap_const_lv1_1)))) then 
            perceptron_V_1_we0 <= ap_const_logic_1;
        else 
            perceptron_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    perceptron_V_2_address0_assign_proc : process(ap_CS_fsm_state1, perceptron_V_2_addr_reg_473, xor_ln60_1_reg_540, zext_ln544_fu_166_p1, ap_CS_fsm_state3, and_ln15_fu_314_p2, xor_ln879_1_fu_390_p2, icmp_ln895_3_fu_416_p2, icmp_ln887_3_fu_427_p2)
    begin
        if ((((ap_const_lv1_0 = and_ln15_fu_314_p2) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln887_3_fu_427_p2 = ap_const_lv1_1) and (xor_ln879_1_fu_390_p2 = ap_const_lv1_1) and (xor_ln60_1_reg_540 = ap_const_lv1_1)) or ((xor_ln879_1_fu_390_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln15_fu_314_p2) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln895_3_fu_416_p2 = ap_const_lv1_1) and (xor_ln60_1_reg_540 = ap_const_lv1_1)))) then 
            perceptron_V_2_address0 <= perceptron_V_2_addr_reg_473;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            perceptron_V_2_address0 <= zext_ln544_fu_166_p1(6 - 1 downto 0);
        else 
            perceptron_V_2_address0 <= "XXXXXX";
        end if; 
    end process;


    perceptron_V_2_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, xor_ln60_1_reg_540, ap_CS_fsm_state3, and_ln15_fu_314_p2, xor_ln879_1_fu_390_p2, icmp_ln895_3_fu_416_p2, icmp_ln887_3_fu_427_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_const_lv1_0 = and_ln15_fu_314_p2) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln887_3_fu_427_p2 = ap_const_lv1_1) and (xor_ln879_1_fu_390_p2 = ap_const_lv1_1) and (xor_ln60_1_reg_540 = ap_const_lv1_1)) or ((xor_ln879_1_fu_390_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln15_fu_314_p2) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln895_3_fu_416_p2 = ap_const_lv1_1) and (xor_ln60_1_reg_540 = ap_const_lv1_1)))) then 
            perceptron_V_2_ce0 <= ap_const_logic_1;
        else 
            perceptron_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    perceptron_V_2_d0_assign_proc : process(xor_ln879_1_fu_390_p2, icmp_ln895_3_fu_416_p2, add_ln701_3_fu_421_p2, icmp_ln887_3_fu_427_p2, add_ln700_3_fu_432_p2, ap_condition_455)
    begin
        if ((ap_const_boolean_1 = ap_condition_455)) then
            if (((icmp_ln887_3_fu_427_p2 = ap_const_lv1_1) and (xor_ln879_1_fu_390_p2 = ap_const_lv1_1))) then 
                perceptron_V_2_d0 <= add_ln700_3_fu_432_p2;
            elsif (((xor_ln879_1_fu_390_p2 = ap_const_lv1_0) and (icmp_ln895_3_fu_416_p2 = ap_const_lv1_1))) then 
                perceptron_V_2_d0 <= add_ln701_3_fu_421_p2;
            else 
                perceptron_V_2_d0 <= "XXXX";
            end if;
        else 
            perceptron_V_2_d0 <= "XXXX";
        end if; 
    end process;


    perceptron_V_2_we0_assign_proc : process(xor_ln60_1_reg_540, ap_CS_fsm_state3, and_ln15_fu_314_p2, xor_ln879_1_fu_390_p2, icmp_ln895_3_fu_416_p2, icmp_ln887_3_fu_427_p2)
    begin
        if ((((ap_const_lv1_0 = and_ln15_fu_314_p2) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln887_3_fu_427_p2 = ap_const_lv1_1) and (xor_ln879_1_fu_390_p2 = ap_const_lv1_1) and (xor_ln60_1_reg_540 = ap_const_lv1_1)) or ((xor_ln879_1_fu_390_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln15_fu_314_p2) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln895_3_fu_416_p2 = ap_const_lv1_1) and (xor_ln60_1_reg_540 = ap_const_lv1_1)))) then 
            perceptron_V_2_we0 <= ap_const_logic_1;
        else 
            perceptron_V_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    perceptron_V_3_address0_assign_proc : process(ap_CS_fsm_state1, perceptron_V_3_addr_reg_478, xor_ln60_1_reg_540, zext_ln544_fu_166_p1, ap_CS_fsm_state3, and_ln15_fu_314_p2, xor_ln879_1_fu_390_p2, icmp_ln895_4_fu_394_p2, icmp_ln887_4_fu_405_p2)
    begin
        if ((((ap_const_lv1_0 = and_ln15_fu_314_p2) and (xor_ln60_1_reg_540 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln887_4_fu_405_p2 = ap_const_lv1_1) and (xor_ln879_1_fu_390_p2 = ap_const_lv1_1)) or ((xor_ln879_1_fu_390_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln15_fu_314_p2) and (xor_ln60_1_reg_540 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln895_4_fu_394_p2 = ap_const_lv1_1)))) then 
            perceptron_V_3_address0 <= perceptron_V_3_addr_reg_478;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            perceptron_V_3_address0 <= zext_ln544_fu_166_p1(6 - 1 downto 0);
        else 
            perceptron_V_3_address0 <= "XXXXXX";
        end if; 
    end process;


    perceptron_V_3_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, xor_ln60_1_reg_540, ap_CS_fsm_state3, and_ln15_fu_314_p2, xor_ln879_1_fu_390_p2, icmp_ln895_4_fu_394_p2, icmp_ln887_4_fu_405_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_const_lv1_0 = and_ln15_fu_314_p2) and (xor_ln60_1_reg_540 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln887_4_fu_405_p2 = ap_const_lv1_1) and (xor_ln879_1_fu_390_p2 = ap_const_lv1_1)) or ((xor_ln879_1_fu_390_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln15_fu_314_p2) and (xor_ln60_1_reg_540 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln895_4_fu_394_p2 = ap_const_lv1_1)))) then 
            perceptron_V_3_ce0 <= ap_const_logic_1;
        else 
            perceptron_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    perceptron_V_3_d0_assign_proc : process(xor_ln879_1_fu_390_p2, icmp_ln895_4_fu_394_p2, add_ln701_4_fu_399_p2, icmp_ln887_4_fu_405_p2, add_ln700_4_fu_410_p2, ap_condition_460)
    begin
        if ((ap_const_boolean_1 = ap_condition_460)) then
            if (((icmp_ln887_4_fu_405_p2 = ap_const_lv1_1) and (xor_ln879_1_fu_390_p2 = ap_const_lv1_1))) then 
                perceptron_V_3_d0 <= add_ln700_4_fu_410_p2;
            elsif (((xor_ln879_1_fu_390_p2 = ap_const_lv1_0) and (icmp_ln895_4_fu_394_p2 = ap_const_lv1_1))) then 
                perceptron_V_3_d0 <= add_ln701_4_fu_399_p2;
            else 
                perceptron_V_3_d0 <= "XXXX";
            end if;
        else 
            perceptron_V_3_d0 <= "XXXX";
        end if; 
    end process;


    perceptron_V_3_we0_assign_proc : process(xor_ln60_1_reg_540, ap_CS_fsm_state3, and_ln15_fu_314_p2, xor_ln879_1_fu_390_p2, icmp_ln895_4_fu_394_p2, icmp_ln887_4_fu_405_p2)
    begin
        if ((((ap_const_lv1_0 = and_ln15_fu_314_p2) and (xor_ln60_1_reg_540 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln887_4_fu_405_p2 = ap_const_lv1_1) and (xor_ln879_1_fu_390_p2 = ap_const_lv1_1)) or ((xor_ln879_1_fu_390_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln15_fu_314_p2) and (xor_ln60_1_reg_540 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln895_4_fu_394_p2 = ap_const_lv1_1)))) then 
            perceptron_V_3_we0 <= ap_const_logic_1;
        else 
            perceptron_V_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    perceptron_V_4_address0_assign_proc : process(ap_CS_fsm_state1, perceptron_V_4_addr_reg_458, result_V_read_reg_483, zext_ln544_fu_166_p1, ap_CS_fsm_state3, and_ln15_fu_314_p2, icmp_ln895_fu_320_p2, icmp_ln887_fu_331_p2)
    begin
        if ((((ap_const_lv1_0 = and_ln15_fu_314_p2) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln887_fu_331_p2 = ap_const_lv1_1) and (result_V_read_reg_483 = ap_const_lv1_1)) or ((ap_const_lv1_0 = and_ln15_fu_314_p2) and (result_V_read_reg_483 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln895_fu_320_p2 = ap_const_lv1_1)))) then 
            perceptron_V_4_address0 <= perceptron_V_4_addr_reg_458;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            perceptron_V_4_address0 <= zext_ln544_fu_166_p1(6 - 1 downto 0);
        else 
            perceptron_V_4_address0 <= "XXXXXX";
        end if; 
    end process;


    perceptron_V_4_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, result_V_read_reg_483, ap_CS_fsm_state3, and_ln15_fu_314_p2, icmp_ln895_fu_320_p2, icmp_ln887_fu_331_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_const_lv1_0 = and_ln15_fu_314_p2) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln887_fu_331_p2 = ap_const_lv1_1) and (result_V_read_reg_483 = ap_const_lv1_1)) or ((ap_const_lv1_0 = and_ln15_fu_314_p2) and (result_V_read_reg_483 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln895_fu_320_p2 = ap_const_lv1_1)))) then 
            perceptron_V_4_ce0 <= ap_const_logic_1;
        else 
            perceptron_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    perceptron_V_4_d0_assign_proc : process(result_V_read_reg_483, ap_CS_fsm_state3, and_ln15_fu_314_p2, icmp_ln895_fu_320_p2, add_ln701_fu_325_p2, icmp_ln887_fu_331_p2, add_ln700_fu_336_p2)
    begin
        if (((ap_const_lv1_0 = and_ln15_fu_314_p2) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
            if (((icmp_ln887_fu_331_p2 = ap_const_lv1_1) and (result_V_read_reg_483 = ap_const_lv1_1))) then 
                perceptron_V_4_d0 <= add_ln700_fu_336_p2;
            elsif (((result_V_read_reg_483 = ap_const_lv1_0) and (icmp_ln895_fu_320_p2 = ap_const_lv1_1))) then 
                perceptron_V_4_d0 <= add_ln701_fu_325_p2;
            else 
                perceptron_V_4_d0 <= "XXXX";
            end if;
        else 
            perceptron_V_4_d0 <= "XXXX";
        end if; 
    end process;


    perceptron_V_4_we0_assign_proc : process(result_V_read_reg_483, ap_CS_fsm_state3, and_ln15_fu_314_p2, icmp_ln895_fu_320_p2, icmp_ln887_fu_331_p2)
    begin
        if ((((ap_const_lv1_0 = and_ln15_fu_314_p2) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln887_fu_331_p2 = ap_const_lv1_1) and (result_V_read_reg_483 = ap_const_lv1_1)) or ((ap_const_lv1_0 = and_ln15_fu_314_p2) and (result_V_read_reg_483 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln895_fu_320_p2 = ap_const_lv1_1)))) then 
            perceptron_V_4_we0 <= ap_const_logic_1;
        else 
            perceptron_V_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1352_1_fu_255_p3 <= 
        sub_ln1352_1_fu_249_p2 when (bht_2(0) = '1') else 
        sext_ln1352_2_fu_245_p1;
    select_ln1352_fu_233_p3 <= 
        sub_ln1352_fu_227_p2 when (bht_0(0) = '1') else 
        sext_ln1352_fu_223_p1;
    select_ln60_1_fu_215_p3 <= 
        perceptron_V_2_q0 when (xor_ln60_1_fu_209_p2(0) = '1') else 
        perceptron_V_3_q0;
    select_ln60_fu_193_p3 <= 
        perceptron_V_0_q0 when (xor_ln60_fu_187_p2(0) = '1') else 
        perceptron_V_1_q0;
    select_ln74_fu_298_p3 <= 
        sub_ln74_fu_293_p2 when (tmp_reg_566(0) = '1') else 
        add_ln70_1_reg_560;
        sext_ln1352_1_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln1352_fu_233_p3),6));

        sext_ln1352_2_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln60_1_fu_215_p3),5));

        sext_ln1352_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln60_fu_193_p3),5));

    sext_ln60_fu_175_p0 <= perceptron_V_4_q0;
        sext_ln60_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln60_fu_175_p0),5));

        sext_ln70_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln70_fu_263_p2),6));

    sub_ln1352_1_fu_249_p2 <= std_logic_vector(unsigned(ap_const_lv5_0) - unsigned(sext_ln1352_2_fu_245_p1));
    sub_ln1352_fu_227_p2 <= std_logic_vector(unsigned(ap_const_lv5_0) - unsigned(sext_ln1352_fu_223_p1));
    sub_ln74_fu_293_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(add_ln70_1_reg_560));
    xor_ln15_fu_304_p2 <= (tmp_reg_566 xor result_V_read_reg_483);
    xor_ln60_1_fu_209_p2 <= (bht_3 xor bht_2);
    xor_ln60_fu_187_p2 <= (bht_1 xor bht_0);
    xor_ln879_1_fu_390_p2 <= (result_V_read_reg_483 xor bht_2_load_reg_529);
    xor_ln879_fu_342_p2 <= (result_V_read_reg_483 xor bht_0_load_reg_499);
    zext_ln544_fu_166_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_V_fu_162_p1),64));
end behav;
